#!/usr/bin/env python
import os
import signal

from supervisor import childutils


SIGNAL_STATES = {
    'PROCESS_STATE_EXITED': signal.SIGTERM,
    'PROCESS_STATE_FATAL': signal.SIGTERM,
}


def main():
    """
    Listen on supervisor events and SIGTERM supervisord process if any process enters STOPPED or FATAL state.

    This listener must be run from the supervisord instance that it is managing in order to the listener to
    get supervisord PID using os.getppid(). An example of the supervisord conf entry:

        [eventlistener:exit_on_any_done]
            command=supervisord-exit-on-done
            events=PROCESS_STATE_STOPPED,PROCESS_STATE_FATAL
    """
    while True:
        headers, payload = childutils.listener.wait()
        childutils.listener.ok()

        if headers['eventname'] in SIGNAL_STATES:
            os.kill(os.getppid(), SIGNAL_STATES[headers['eventname']])


if __name__ == '__main__':
    main()
